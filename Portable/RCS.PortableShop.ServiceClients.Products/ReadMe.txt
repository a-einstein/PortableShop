> This project has been migrated to .Net STANDARD, but by a HACK.

A CONNECTED service client was generated by the new means. The interface changed and thus the calls into the client, like currently used in the WPF project.
But this turned out not to work, because of a shortcoming in Mono as described here:
https://github.com/dotnet/wcf/issues/2463

At first I kept this client for documentation and comparison purposes. But disabled it by using a different namespace.
Later on I removed it as it lagged behind other updates, was confusing, created a significant amount of dead code, and should be regenerateable.

I have copied and reused the old PCL client into this project, basically following a workaround as described here:
https://xamarin.github.io/bugzilla-archives/51/51959/bug.html
The Reference.cs might have been sufficient, but I copied it entirely for clarity. 
It probably is no longer possible to simply update or reconfigure it the former way.

Later on I have hacked this client to get rid of redundant and inconsistent DTO classes (see the diffs). 
Afterwards more changes have been made directly in the code.

Besides hoping for progress in Mono, or keep working manually on the old WCF client, an alternative way is to use Web API.
Meanwhile I have created that alternative, which currently can be used besides the WCF one by means of dependency injection.

> TODO Currently (14-09-2022) I could still not update System.ServiceModel.Http higher than Version=4.5.3 (instead of 4.10.0).
Note there are build warnings.
Otherwise on UWP, specifically using WCF, exceptions arise about System.ServiceModel.Primitives.
It still seems related to https://github.com/dotnet/wcf/issues/3088 and https://github.com/dotnet/wcf/issues/4762
I have tried some workarounds in https://devblogs.microsoft.com/oldnewthing/20200615-00/?p=103868
Removal of FaultException seemed a solution, but turned out a mistake. https://stackoverflow.com/questions/52498144/system-io-fileloadexception-on-system-servicemodel-primitives/70024433
